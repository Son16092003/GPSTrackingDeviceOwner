package com.plcoding.backgroundlocationtracking.service

import android.annotation.SuppressLint
import android.content.Context
import android.location.Location
import android.location.LocationManager
import android.os.Build
import android.os.Looper
import android.util.Log
import com.google.android.gms.location.*
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.callbackFlow
import kotlinx.coroutines.launch
import com.plcoding.backgroundlocationtracking.hasFineLocationPermission
import com.plcoding.backgroundlocationtracking.hasCoarseLocationPermission
import com.plcoding.backgroundlocationtracking.hasBackgroundLocationPermission

class DefaultLocationClient(
    private val context: Context,
    private val client: FusedLocationProviderClient
) : LocationClient {

    companion object {
        private const val TAG = "DefaultLocationClient"
    }

    private var lastLocation: Location? = null

    @SuppressLint("MissingPermission")
    override fun getLocationUpdates(interval: Long): Flow<Location> = callbackFlow {
        Log.d(TAG, "üöÄ [START] getLocationUpdates() v·ªõi interval=${interval}ms")

        // --- 1. Ki·ªÉm tra quy·ªÅn ---
        val hasFine = context.hasFineLocationPermission()
        val hasCoarse = context.hasCoarseLocationPermission()
        val hasBackground = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q)
            context.hasBackgroundLocationPermission() else true

        Log.d(TAG, "üîç Ki·ªÉm tra quy·ªÅn:")
        Log.d(TAG, "    ‚û§ ACCESS_FINE_LOCATION: ${if (hasFine) "‚úÖ GRANTED" else "‚ùå DENIED"}")
        Log.d(TAG, "    ‚û§ ACCESS_COARSE_LOCATION: ${if (hasCoarse) "‚úÖ GRANTED" else "‚ùå DENIED"}")
        Log.d(TAG, "    ‚û§ ACCESS_BACKGROUND_LOCATION: ${if (hasBackground) "‚úÖ GRANTED" else "‚ùå DENIED"}")

        if (!hasFine && !hasCoarse) {
            throw LocationClient.LocationException("Missing location permission")
        }

        // --- 2. Ki·ªÉm tra GPS ---
        val locationManager = context.getSystemService(Context.LOCATION_SERVICE) as LocationManager
        val isGpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)

        Log.d(TAG, "üì° Tr·∫°ng th√°i GPS: ${if (isGpsEnabled) "‚úÖ Enabled" else "‚ùå Disabled"}")

        if (!isGpsEnabled) {
            throw LocationClient.LocationException("GPS is disabled")
        }

        // --- 3. T·∫°o LocationRequest ---
        val request = LocationRequest.Builder(
            Priority.PRIORITY_HIGH_ACCURACY,
            interval
        ).apply {
            setMinUpdateIntervalMillis(interval)
            setWaitForAccurateLocation(true)
        }.build()

        Log.d(TAG, "üß© ƒê√£ t·∫°o LocationRequest: interval=${interval}ms, priority=HIGH_ACCURACY")

        // --- 4. T·∫°o callback ---
        val locationCallback = object : LocationCallback() {
            override fun onLocationResult(result: LocationResult) {
                val newLocation = result.lastLocation ?: return

                // Emit lu√¥n, b·∫•t k·ªÉ kho·∫£ng c√°ch
                lastLocation = newLocation
                launch { send(newLocation) }

                Log.d(TAG, "üìç [Fused] lat=${newLocation.latitude}, lon=${newLocation.longitude}, acc=${newLocation.accuracy}m ‚úÖ EMIT")
            }

            override fun onLocationAvailability(availability: LocationAvailability) {
                Log.d(TAG, "üì∂ Location availability: ${availability.isLocationAvailable}")
                if (!availability.isLocationAvailable) {
                    Log.w(TAG, "‚ö†Ô∏è Fused kh√¥ng kh·∫£ d·ª•ng, re-register location updates...")
                    tryReRegister()
                }
            }

            private fun tryReRegister() {
                try {
                    client.removeLocationUpdates(this)
                    client.requestLocationUpdates(request, this, Looper.getMainLooper())
                    Log.d(TAG, "üîÑ Re-registered FusedLocationProviderClient")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå L·ªói re-register Fused: ${e.message}")
                }
            }
        }

        // --- 5. ƒêƒÉng k√Ω callback l·∫ßn ƒë·∫ßu ---
        try {
            client.requestLocationUpdates(request, locationCallback, Looper.getMainLooper())
            Log.d(TAG, "‚úÖ ƒê√£ ƒëƒÉng k√Ω c·∫≠p nh·∫≠t v·ªã tr√≠ th√†nh c√¥ng.")
        } catch (e: Exception) {
            throw LocationClient.LocationException("Failed to request location updates: ${e.message}")
        }

        // --- 6. D·ªçn d·∫πp khi Flow b·ªã cancel ---
        awaitClose {
            Log.d(TAG, "üßπ [CLOSE] D·ª´ng c·∫≠p nh·∫≠t v·ªã tr√≠...")
            client.removeLocationUpdates(locationCallback)
            Log.d(TAG, "üßΩ [DONE] Callback Fused ƒë√£ g·ª°")
        }
    }
}
