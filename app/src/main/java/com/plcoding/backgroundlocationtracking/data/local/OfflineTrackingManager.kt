package com.plcoding.backgroundlocationtracking.data.local

import android.content.Context
import android.util.Log
import com.plcoding.backgroundlocationtracking.data.model.TrackingData
import com.plcoding.backgroundlocationtracking.data.network.TrackingRepository
import kotlinx.coroutines.*

class OfflineTrackingManager private constructor(context: Context) {

    private val TAG = "OfflineTrackingManager"
    private val dao = TrackingDatabase.getInstance(context).offlineTrackingDao()
    private val scope = CoroutineScope(SupervisorJob() + Dispatchers.IO)

    @Volatile
    private var isRetrying = false

    companion object {
        @Volatile
        private var INSTANCE: OfflineTrackingManager? = null

        fun getInstance(context: Context): OfflineTrackingManager {
            return INSTANCE ?: synchronized(this) {
                INSTANCE ?: OfflineTrackingManager(context.applicationContext).also { INSTANCE = it }
            }
        }

        fun saveOffline(context: Context, tracking: TrackingData) {
            getInstance(context).saveTracking(tracking)
        }

        suspend fun retryOffline(context: Context): Int {
            return getInstance(context).startRetryQueue()
        }

        // ‚úÖ S·ª≠a l·∫°i h√†m n√†y th√†nh suspend
        suspend fun getPendingCount(context: Context): Int {
            val pendingList = getInstance(context).dao.getAll() // g·ªçi suspend
            return pendingList.size
        }
    }


    /**
     * L∆∞u b·∫£n ghi v√†o Room DB (khi kh√¥ng c√≥ m·∫°ng)
     */
    private fun saveTracking(tracking: TrackingData) {
        scope.launch {
            try {
                dao.insert(
                    OfflineTrackingEntity(
                        oid = tracking.Oid,
                        deviceID = tracking.DeviceID,
                        title = tracking.Title,
                        latitude = tracking.Latitude,
                        longitude = tracking.Longitude,
                        recordDate = tracking.RecordDate,
                        optimisticLockField = tracking.OptimisticLockField,
                        gcRecord = tracking.GCRecord,
                        userName = tracking.UserName
                    )
                )
                Log.w(
                    TAG,
                    "üíæ L∆∞u d·ªØ li·ªáu pending offline: [Oid=${tracking.Oid}, Device=${tracking.DeviceID}, Lat=${tracking.Latitude}, Lon=${tracking.Longitude}]"
                )
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu offline: ${e.message}")
            }
        }
    }

    /**
     * G·ª≠i l·∫°i to√†n b·ªô d·ªØ li·ªáu offline khi c√≥ m·∫°ng
     */
    private suspend fun startRetryQueue(): Int {
        if (isRetrying) {
            Log.i(TAG, "‚è≥ Retry ƒëang ch·∫°y, b·ªè qua l·∫ßn g·ªçi n√†y.")
            return 0
        }

        isRetrying = true
        var successCount = 0

        return withContext(Dispatchers.IO) {
            try {
                val pendingList = dao.getAll().toMutableList()
                if (pendingList.isEmpty()) {
                    Log.i(TAG, "‚úÖ Kh√¥ng c√≥ d·ªØ li·ªáu pending ƒë·ªÉ retry.")
                    return@withContext 0
                }

                Log.i(TAG, "üöÄ B·∫Øt ƒë·∫ßu retry ${pendingList.size} b·∫£n ghi offline...")

                for (item in pendingList) {
                    val trackingData = TrackingData(
                        Oid = item.oid,
                        DeviceID = item.deviceID,
                        Title = item.title,
                        Latitude = item.latitude,
                        Longitude = item.longitude,
                        RecordDate = item.recordDate,
                        OptimisticLockField = item.optimisticLockField,
                        GCRecord = item.gcRecord,
                        UserName = item.userName
                    )

                    val success = try {
                        TrackingRepository.postTrackingWithRetry(trackingData)
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå L·ªói g·ª≠i ID=${item.id}: ${e.message}")
                        false
                    }

                    if (success) {
                        dao.deleteById(item.id)
                        successCount++
                        Log.i(TAG, "‚úÖ G·ª≠i th√†nh c√¥ng ID=${item.id}, x√≥a kh·ªèi pending.")
                    } else {
                        Log.w(TAG, "‚ö†Ô∏è G·ª≠i th·∫•t b·∫°i ID=${item.id}, gi·ªØ l·∫°i pending.")
                    }

                    delay(1000) // throttle tr√°nh spam server
                }

                Log.i(
                    TAG,
                    "üéØ Retry ho√†n t·∫•t: $successCount/${pendingList.size} b·∫£n ghi g·ª≠i th√†nh c√¥ng."
                )
                successCount
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå L·ªói trong startRetryQueue: ${e.message}")
                0
            } finally {
                isRetrying = false
            }
        }
    }
}
